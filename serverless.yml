service: user-api-serverless-node
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    USER_TABLE: users
    SQS_QUEUE_URL:
      Ref: UserQueue
    SNS_TOPIC_ARN:
      Ref: EmailNotificationTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/users

        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [UserQueue, Arn]

        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [UserQueue, Arn]

        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Ref: EmailNotificationTopic

functions:
  # Lambda 1: crear usuario y enviar a SQS
  createUser:
    handler: src/index.createUser
    events:
      - http:
          path: users
          method: post

  getUsers:
    handler: src/index.getUsers
    events:
      - http:
          path: users
          method: get

  updateUser:
    handler: src/index.updateUser
    events:
      - http:
          path: users/{id}
          method: put

  deleteUser:
    handler: src/index.deleteUser
    events:
      - http:
          path: users/{id}
          method: delete

  getUserById:
    handler: src/index.getUserById
    events:
      - http:
          path: users/{id}
          method: get

  # Lambda 2: escuchar desde SQS y enviar a SNS
  sendEmail:
    handler: src/index.sendEmail
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UserQueue
              - Arn

resources:
  Resources:

    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: user-queue

    EmailNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: email-notification-topic

    EmailNotificationSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: EmailNotificationTopic
        Protocol: email
        Endpoint: crcamiruiz13@gmail.com    
